/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LegendaryFinderRouteImport } from './routes/legendary-finder'
import { Route as LegendaryRouteImport } from './routes/legendary'
import { Route as DailyRouteImport } from './routes/daily'
import { Route as CharactersRouteImport } from './routes/characters'
import { Route as AccountRouteImport } from './routes/account'
import { Route as IndexRouteImport } from './routes/index'

const LegendaryFinderRoute = LegendaryFinderRouteImport.update({
  id: '/legendary-finder',
  path: '/legendary-finder',
  getParentRoute: () => rootRouteImport,
} as any)
const LegendaryRoute = LegendaryRouteImport.update({
  id: '/legendary',
  path: '/legendary',
  getParentRoute: () => rootRouteImport,
} as any)
const DailyRoute = DailyRouteImport.update({
  id: '/daily',
  path: '/daily',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersRoute = CharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/characters': typeof CharactersRoute
  '/daily': typeof DailyRoute
  '/legendary': typeof LegendaryRoute
  '/legendary-finder': typeof LegendaryFinderRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/characters': typeof CharactersRoute
  '/daily': typeof DailyRoute
  '/legendary': typeof LegendaryRoute
  '/legendary-finder': typeof LegendaryFinderRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/characters': typeof CharactersRoute
  '/daily': typeof DailyRoute
  '/legendary': typeof LegendaryRoute
  '/legendary-finder': typeof LegendaryFinderRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/characters'
    | '/daily'
    | '/legendary'
    | '/legendary-finder'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/characters'
    | '/daily'
    | '/legendary'
    | '/legendary-finder'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/characters'
    | '/daily'
    | '/legendary'
    | '/legendary-finder'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  CharactersRoute: typeof CharactersRoute
  DailyRoute: typeof DailyRoute
  LegendaryRoute: typeof LegendaryRoute
  LegendaryFinderRoute: typeof LegendaryFinderRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/legendary-finder': {
      id: '/legendary-finder'
      path: '/legendary-finder'
      fullPath: '/legendary-finder'
      preLoaderRoute: typeof LegendaryFinderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legendary': {
      id: '/legendary'
      path: '/legendary'
      fullPath: '/legendary'
      preLoaderRoute: typeof LegendaryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/daily': {
      id: '/daily'
      path: '/daily'
      fullPath: '/daily'
      preLoaderRoute: typeof DailyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  CharactersRoute: CharactersRoute,
  DailyRoute: DailyRoute,
  LegendaryRoute: LegendaryRoute,
  LegendaryFinderRoute: LegendaryFinderRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
